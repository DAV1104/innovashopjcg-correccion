[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config.db",
        "description": "config.db",
        "isExtraImport": true,
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "Administrador",
        "importPath": "models.Administrador",
        "description": "models.Administrador",
        "isExtraImport": true,
        "detail": "models.Administrador",
        "documentation": {}
    },
    {
        "label": "Administrador",
        "importPath": "models.Administrador",
        "description": "models.Administrador",
        "isExtraImport": true,
        "detail": "models.Administrador",
        "documentation": {}
    },
    {
        "label": "AdministradorSchema",
        "importPath": "models.Administrador",
        "description": "models.Administrador",
        "isExtraImport": true,
        "detail": "models.Administrador",
        "documentation": {}
    },
    {
        "label": "Administrador",
        "importPath": "models.Administrador",
        "description": "models.Administrador",
        "isExtraImport": true,
        "detail": "models.Administrador",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "models.Usuario",
        "description": "models.Usuario",
        "isExtraImport": true,
        "detail": "models.Usuario",
        "documentation": {}
    },
    {
        "label": "UsuarioSchema",
        "importPath": "models.Usuario",
        "description": "models.Usuario",
        "isExtraImport": true,
        "detail": "models.Usuario",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "hashing_helper",
        "description": "hashing_helper",
        "isExtraImport": true,
        "detail": "hashing_helper",
        "documentation": {}
    },
    {
        "label": "ruta_auth",
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "isExtraImport": true,
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "ruta_admin",
        "importPath": "controllers.Administrador",
        "description": "controllers.Administrador",
        "isExtraImport": true,
        "detail": "controllers.Administrador",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "controllers.hashing_helper",
        "description": "controllers.hashing_helper",
        "isExtraImport": true,
        "detail": "controllers.hashing_helper",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root@localhost:3307/incjg'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = \"0febc2ce4e68016ccf8bc4fd8b9687b9\"\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root@localhost:3307/incjg'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = \"0febc2ce4e68016ccf8bc4fd8b9687b9\"\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\napp.secret_key = \"0febc2ce4e68016ccf8bc4fd8b9687b9\"\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "app.secret_key = \"0febc2ce4e68016ccf8bc4fd8b9687b9\"\ndb = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "db = SQLAlchemy(app)\nma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "config.db",
        "description": "config.db",
        "peekOfCode": "ma = Marshmallow(app)",
        "detail": "config.db",
        "documentation": {}
    },
    {
        "label": "homeadmin",
        "kind": 2,
        "importPath": "controllers.Administrador",
        "description": "controllers.Administrador",
        "peekOfCode": "def homeadmin():\n    return render_template('admin-templates/admin.html')",
        "detail": "controllers.Administrador",
        "documentation": {}
    },
    {
        "label": "ruta_admin",
        "kind": 5,
        "importPath": "controllers.Administrador",
        "description": "controllers.Administrador",
        "peekOfCode": "ruta_admin = Blueprint('admin_route', __name__)\n@ruta_admin.route('/admin')\ndef homeadmin():\n    return render_template('admin-templates/admin.html')",
        "detail": "controllers.Administrador",
        "documentation": {}
    },
    {
        "label": "generar_token_admin",
        "kind": 2,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "def generar_token_admin(user_id):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\n    return token\n@ruta_auth.route('/login', methods=['GET'])\ndef login():",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "def login():\n    return render_template(\"admin-templates/login.html\")\n@ruta_auth.route('/ingreso-admin', methods=['POST'])\ndef login_admin():\n    data = request.json\n    if not data[\"clave\"] or not data[\"usuario\"]:\n        return jsonify({\"error\": \"Uno o más campos están vacíos\"}), 400\n    administrador = Administrador.query.filter_by(\n        usuario=data[\"usuario\"],\n    ).first()",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "login_admin",
        "kind": 2,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "def login_admin():\n    data = request.json\n    if not data[\"clave\"] or not data[\"usuario\"]:\n        return jsonify({\"error\": \"Uno o más campos están vacíos\"}), 400\n    administrador = Administrador.query.filter_by(\n        usuario=data[\"usuario\"],\n    ).first()\n    if administrador is None or not verify_password(administrador.contraseña, data[\"clave\"]):\n        return jsonify({\"error\": \"Usuario o contraseña incorrectos\"}), 404\n    token = generar_token_admin(administrador.id)",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "administrador_schema",
        "kind": 5,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "administrador_schema = AdministradorSchema()\nadministradores_schema = AdministradorSchema(many=True)\nruta_auth = Blueprint('auth_route', __name__)\nSECRET_KEY = 'Bendiciones-para-todos'  # Ensure you have a secret key for JWT\ndef generar_token_admin(user_id):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n    }",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "administradores_schema",
        "kind": 5,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "administradores_schema = AdministradorSchema(many=True)\nruta_auth = Blueprint('auth_route', __name__)\nSECRET_KEY = 'Bendiciones-para-todos'  # Ensure you have a secret key for JWT\ndef generar_token_admin(user_id):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "ruta_auth",
        "kind": 5,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "ruta_auth = Blueprint('auth_route', __name__)\nSECRET_KEY = 'Bendiciones-para-todos'  # Ensure you have a secret key for JWT\ndef generar_token_admin(user_id):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\n    return token",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "controllers.Auth",
        "description": "controllers.Auth",
        "peekOfCode": "SECRET_KEY = 'Bendiciones-para-todos'  # Ensure you have a secret key for JWT\ndef generar_token_admin(user_id):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\n    return token\n@ruta_auth.route('/login', methods=['GET'])",
        "detail": "controllers.Auth",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "controllers.hashing_helper",
        "description": "controllers.hashing_helper",
        "peekOfCode": "def hash_password(password):\n    salt = os.urandom(16)\n    salted_password = password.encode('utf-8') + salt\n    md5_hash = hashlib.md5(salted_password).hexdigest()\n    return salt.hex() + md5_hash\n#verifica la contraseña mediante ingenieria inversa de lo anterior\ndef verify_password(stored_password, provided_password):\n    try:\n        salt = bytes.fromhex(stored_password[:32])\n        stored_hash = stored_password[32:]",
        "detail": "controllers.hashing_helper",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "controllers.hashing_helper",
        "description": "controllers.hashing_helper",
        "peekOfCode": "def verify_password(stored_password, provided_password):\n    try:\n        salt = bytes.fromhex(stored_password[:32])\n        stored_hash = stored_password[32:]\n        salted_password = provided_password.encode('utf-8') + salt\n        md5_hash = hashlib.md5(salted_password).hexdigest()\n        return stored_hash == md5_hash\n    except ValueError:\n        return stored_password == provided_password",
        "detail": "controllers.hashing_helper",
        "documentation": {}
    },
    {
        "label": "generar_token",
        "kind": 2,
        "importPath": "controllers.Usuarios",
        "description": "controllers.Usuarios",
        "peekOfCode": "def generar_token(user_id, rol):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n        \"rol\": rol\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\n    return token\n@ruta_user.route('/login', methods=['POST'])",
        "detail": "controllers.Usuarios",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "controllers.Usuarios",
        "description": "controllers.Usuarios",
        "peekOfCode": "def login_user():\n    data = request.json\n    if not data[\"clave\"] or not data[\"usuario\"]:\n        return jsonify({\"error\": \"Uno o más campos están vacíos\"}), 400\n    usuario = Usuario.query.filter_by(usuario=data[\"usuario\"]).first()\n    if usuario is None or not verify_password(usuario.contraseña, data[\"clave\"]):\n        return jsonify({\"error\": \"Usuario o contraseña incorrectos\"}), 404\n    token = generar_token(usuario.id, usuario.rol)\n    response = jsonify({\"success\": True, \"token\": token, \"rol\": usuario.rol})\n    response.set_cookie('token', token)",
        "detail": "controllers.Usuarios",
        "documentation": {}
    },
    {
        "label": "ruta_user",
        "kind": 5,
        "importPath": "controllers.Usuarios",
        "description": "controllers.Usuarios",
        "peekOfCode": "ruta_user = Blueprint('ruta_user', __name__)\nSECRET_KEY = 'your_secret_key'  # Ensure you have a secret key for JWT\ndef generar_token(user_id, rol):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n        \"rol\": rol\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")",
        "detail": "controllers.Usuarios",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "controllers.Usuarios",
        "description": "controllers.Usuarios",
        "peekOfCode": "SECRET_KEY = 'your_secret_key'  # Ensure you have a secret key for JWT\ndef generar_token(user_id, rol):\n    fecha_vencimiento = datetime.now(tz=timezone.utc) + timedelta(seconds=150)\n    payload = {\n        \"exp\": fecha_vencimiento,\n        \"user_id\": user_id,\n        \"rol\": rol\n    }\n    token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")\n    return token",
        "detail": "controllers.Usuarios",
        "documentation": {}
    },
    {
        "label": "Administrador",
        "kind": 6,
        "importPath": "models.Administrador",
        "description": "models.Administrador",
        "peekOfCode": "class Administrador(db.Model):\n    __tablename__ = 'administradores'\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(255))\n    usuario = db.Column(db.String(255))\n    contraseña = db.Column(db.String(255))\n    def __init__(self, nombre, usuario, contraseña):\n        self.nombre = nombre\n        self.usuario = usuario\n        self.contraseña = contraseña",
        "detail": "models.Administrador",
        "documentation": {}
    },
    {
        "label": "AdministradorSchema",
        "kind": 6,
        "importPath": "models.Administrador",
        "description": "models.Administrador",
        "peekOfCode": "class AdministradorSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'usuario', 'contraseña')",
        "detail": "models.Administrador",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "models.Usuario",
        "description": "models.Usuario",
        "peekOfCode": "class Usuario(db.Model):\n    __tablename__ = \"usuarios\"\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(255))\n    apellidos = db.Column(db.String(255))\n    telefono = db.Column(db.String(255))\n    email = db.Column(db.String(255))\n    cedula = db.Column(db.String(255))\n    usuario = db.Column(db.String(255))\n    contraseña = db.Column(db.String(255))",
        "detail": "models.Usuario",
        "documentation": {}
    },
    {
        "label": "UsuarioSchema",
        "kind": 6,
        "importPath": "models.Usuario",
        "description": "models.Usuario",
        "peekOfCode": "class UsuarioSchema(ma.Schema):\n    class Meta:\n        fields = ('id', 'nombre', 'apellidos', 'telefono', 'email', 'cedula', 'usuario', 'contraseña', 'direccion', 'rol')",
        "detail": "models.Usuario",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return redirect('/auth/login')\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    }
]